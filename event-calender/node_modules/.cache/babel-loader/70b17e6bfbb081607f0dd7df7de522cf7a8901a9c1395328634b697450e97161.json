{"ast":null,"code":"var _jsxFileName = \"/home/brilworks-26/Videos/backup/event-calender/event-calender/src/Pages/CalenderScliderByMonth.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import \"../App.css\";\n// import FontAwesome from \"react-fontawesome\";\n// import * as formik from \"formik\";\n// import { useTranslation } from \"react-i18next\";\n// import LanguageSwitcher from \"./LanguageSwitcher\";\n// import { DayCell } from \"../components/DayCell\";\n// import { DayHeader } from \"../components/DayHeader\";\n// import { EventModal } from \"../components/EventModal\";\n// import {\n//   getDaysInMonth,\n//   nextMonth,\n//   prevMonth,\n//   chunkArray,\n// } from \"../utils/dateFunctions\";\n// const { Formik } = formik;\n\n// const CalenderScliderByMonth = () => {\n//   const [isModalOpen, setIsModalOpen] = useState(false);\n//   const [selectedDay, setSelectedDay] = useState(null);\n//   const [textarea, setTextArea] = useState(\"\");\n//   const [currentDate, setCurrentDate] = useState(new Date());\n//   const [eventData, setEventData] = useState(\n//     JSON.parse(localStorage.getItem(\"eventData\")) || []\n//   );\n\n//   useEffect(() => {\n//     localStorage.setItem(\"eventData\", JSON.stringify(eventData));\n//   }, [eventData]);\n\n//   useEffect(() => {\n//     document.title = `${currentDate.toLocaleString(\"default\", {\n//       month: \"long\",\n//       year: \"numeric\",\n//     })}`;\n//   }, [currentDate]);\n\n//   const { t } = useTranslation();\n\n//   const daysOfWeek = [\n//     t(\"Sunday\"),\n//     t(\"Monday\"),\n//     t(\"Tuesday\"),\n//     t(\"Wednesday\"),\n//     t(\"Thursday\"),\n//     t(\"Friday\"),\n//     t(\"Saturday\"),\n//   ];\n//   const handletextareaChange = (e) => {\n//     setTextArea(e.target.value);\n//   };\n\n//   const handleDayDoubleClick = (day) => {\n//     setSelectedDay(day);\n//     setIsModalOpen(true);\n//   };\n\n//   const closeModal = () => {\n//     setIsModalOpen(false);\n//     setSelectedDay(null);\n//   };\n\n//   const days = Array.from(\n//     {\n//       length: getDaysInMonth(currentDate.getMonth(), currentDate.getFullYear()),\n//     },\n//     (_, i) => i + 1\n//   );\n\n//   const monthName = currentDate.toLocaleString(\"default\", { month: \"long\" });\n//   const translatedMonthName = t(`${monthName}`);\n\n//   const weeks = chunkArray(days, 7);\n//   return (\n//     <div>\n//       <LanguageSwitcher />\n//       <div className=\"buttons flex justify-around h-600 p-500 \">\n//         <button\n//           class=\"p-1\"\n//           onClick={() => prevMonth(currentDate, setCurrentDate)}\n//         >\n//           <FontAwesome name=\"chevron-left\" className=\"-ml-px\" />\n//         </button>\n//         <button\n//           class=\"p-1\"\n//           onClick={() => nextMonth(currentDate, setCurrentDate)}\n//         >\n//           <FontAwesome name=\"chevron-right\" className=\"-ml-px\" />\n//         </button>\n//       </div>\n//       <div class=\"container mx-auto mt-10\">\n//         <div class=\"\">\n//           <div class=\"header flex justify-between border-b p-2\">\n//             <span class=\"text-lg font-bold\">\n//               {\" \"}\n//               <span class=\"text-lg font-bold\">\n//                 {`${translatedMonthName} ${currentDate.getFullYear()}`}\n//               </span>\n//             </span>\n//             <div class=\"buttons\">\n//               <button class=\"p-1\">\n//                 <path\n//                   fill-rule=\"evenodd\"\n//                   d=\"M8 15A7 7 0 1 0 8 1a7 7 0 0 0 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z\"\n//                 />\n//                 <path\n//                   fill-rule=\"evenodd\"\n//                   d=\"M8.354 11.354a.5.5 0 0 0 0-.708L5.707 8l2.647-2.646a.5.5 0 1 0-.708-.708l-3 3a.5.5 0 0 0 0 .708l3 3a.5.5 0 0 0 .708 0z\"\n//                 />\n//                 <path\n//                   fill-rule=\"evenodd\"\n//                   d=\"M11.5 8a.5.5 0 0 0-.5-.5H6a.5.5 0 0 0 0 1h5a.5.5 0 0 0 .5-.5z\"\n//                 />\n//               </button>\n//               <button class=\"p-1\">\n//                 <path\n//                   fill-rule=\"evenodd\"\n//                   d=\"M8 15A7 7 0 1 0 8 1a7 7 0 0 0 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z\"\n//                 />\n//                 <path\n//                   fill-rule=\"evenodd\"\n//                   d=\"M7.646 11.354a.5.5 0 0 1 0-.708L10.293 8 7.646 5.354a.5.5 0 1 1 .708-.708l3 3a.5.5 0 0 1 0 .708l-3 3a.5.5 0 0 1-.708 0z\"\n//                 />\n//                 <path\n//                   fill-rule=\"evenodd\"\n//                   d=\"M4.5 8a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1H5a.5.5 0 0 1-.5-.5z\"\n//                 />\n//               </button>\n//             </div>\n//           </div>\n\n//           <table class=\"w-full\">\n//             <DayHeader daysOfWeek={daysOfWeek} />\n//             <tbody>\n//               {weeks.map((week, weekIndex) => (\n//                 <tr key={weekIndex} className=\"text-center h-20\">\n//                   {week.map((day) => (\n//                     <DayCell\n//                       key={day}\n//                       day={day}\n//                       currentDate={currentDate}\n//                       onDoubleClick={handleDayDoubleClick}\n//                       eventData={eventData}\n//                     />\n//                   ))}\n//                 </tr>\n//               ))}\n//             </tbody>\n//           </table>\n\n//           <EventModal\n//             isOpen={isModalOpen}\n//             onClose={closeModal}\n//             selectedDay={selectedDay}\n//             eventData={eventData}\n//             setEventData={setEventData}\n//             Formik={Formik}\n//             textarea={textarea}\n//             setTextArea={setTextArea}\n//             handletextareaChange={handletextareaChange}\n//             currentDate={currentDate}\n//           />\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default CalenderScliderByMonth;\nimport React, { useState, useEffect } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faChevronLeft, faChevronRight } from \"@fortawesome/free-solid-svg-icons\";\nimport { Formik } from \"formik\";\nimport { useTranslation } from \"react-i18next\";\nimport FontAwesome from \"react-fontawesome\";\nimport \"../App.css\";\nimport LanguageSwitcher from \"./LanguageSwitcher\";\nimport { DayCell } from \"../components/DayCell\";\nimport { DayHeader } from \"../components/DayHeader\";\nimport { EventModal } from \"../components/EventModal\";\nimport { getDaysInMonth, nextMonth, prevMonth, chunkArray } from \"../utils/dateFunctions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CalenderScliderByMonth = () => {\n  _s();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [selectedDay, setSelectedDay] = useState(null);\n  const [textarea, setTextArea] = useState(\"\");\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [eventData, setEventData] = useState(JSON.parse(localStorage.getItem(\"eventData\")) || []);\n  useEffect(() => {\n    localStorage.setItem(\"eventData\", JSON.stringify(eventData));\n  }, [eventData]);\n  const {\n    t\n  } = useTranslation();\n  const daysOfWeek = [t(\"Sunday\"), t(\"Monday\"), t(\"Tuesday\"), t(\"Wednesday\"), t(\"Thursday\"), t(\"Friday\"), t(\"Saturday\")];\n  const handleDayDoubleClick = day => {\n    setSelectedDay(day);\n    setIsModalOpen(true);\n  };\n  const closeModal = () => {\n    setIsModalOpen(false);\n    setSelectedDay(null);\n  };\n  const days = getDaysInMonth(currentDate);\n  const weeks = chunkArray(days, 7);\n  const translatedMonthName = t(`${monthName}`);\n\n  // return (\n  // <div>\n  //   <LanguageSwitcher />\n  //   <div className=\"flex justify-between items-center py-5 px-10\">\n  //     <button onClick={() => prevMonth(currentDate, setCurrentDate)}>\n  //       <FontAwesomeIcon icon={faChevronLeft} />\n  //     </button>\n  //     <h1 className=\"text-xl font-bold\">\n  //       {`${currentDate.toLocaleString(\"default\", {\n  //         month: \"long\",\n  //       })} ${currentDate.getFullYear()}`}\n  //     </h1>\n  //     <button onClick={() => nextMonth(currentDate, setCurrentDate)}>\n  //       <FontAwesomeIcon icon={faChevronRight} />\n  //     </button>\n  //   </div>\n\n  //   < className=\"container mx-auto mt-10\">\n  //     <table className=\"w-full\">\n  //       <DayHeader daysOfWeek={daysOfWeek} />\n  //       <tbody>\n  //         {weeks.map((week, weekIndex) => (\n  //           <tr key={weekIndex} className=\"text-center h-20\">\n  //             {week.map((day) => (\n  //               <DayCell\n  //                 key={day}\n  //                 day={day}\n  //                 currentDate={currentDate}\n  //                 onDoubleClick={handleDayDoubleClick}\n  //                 eventData={eventData}\n  //               />\n  //             ))}\n  //           </tr>\n  //         ))}\n  //       </tbody>\n  //     </table>\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-gray-100 min-h-screen\",\n    children: [/*#__PURE__*/_jsxDEV(LanguageSwitcher, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-between items-center py-4 px-6 bg-white shadow-md\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => prevMonth(currentDate, setCurrentDate),\n        className: \"text-xl\",\n        children: /*#__PURE__*/_jsxDEV(FontAwesome, {\n          name: \"chevron-left\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-2xl font-semibold\",\n        children: `${translatedMonthName} ${currentDate.getFullYear()}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => nextMonth(currentDate, setCurrentDate),\n        className: \"text-xl\",\n        children: /*#__PURE__*/_jsxDEV(FontAwesome, {\n          name: \"chevron-right\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-10\",\n      children: [/*#__PURE__*/_jsxDEV(DayHeader, {\n        daysOfWeek: daysOfWeek\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white shadow-md rounded-lg p-4\",\n        children: weeks.map((week, weekIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex\",\n          children: week.map(day => /*#__PURE__*/_jsxDEV(DayCell, {\n            day: day,\n            currentDate: currentDate,\n            onDoubleClick: handleDayDoubleClick,\n            eventData: eventData\n          }, day, false, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 19\n          }, this))\n        }, weekIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(EventModal, {\n        isOpen: isModalOpen,\n        onClose: closeModal,\n        selectedDay: selectedDay,\n        eventData: eventData,\n        setEventData: setEventData,\n        Formik: Formik,\n        textarea: textarea,\n        setTextArea: setTextArea,\n        currentDate: currentDate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 265,\n    columnNumber: 7\n  }, this);\n};\n_s(CalenderScliderByMonth, \"dnptX/9z9rN32sPO9B93xWfpDYw=\", false, function () {\n  return [useTranslation];\n});\n_c = CalenderScliderByMonth;\nexport default CalenderScliderByMonth;\nvar _c;\n$RefreshReg$(_c, \"CalenderScliderByMonth\");","map":{"version":3,"names":["React","useState","useEffect","FontAwesomeIcon","faChevronLeft","faChevronRight","Formik","useTranslation","FontAwesome","LanguageSwitcher","DayCell","DayHeader","EventModal","getDaysInMonth","nextMonth","prevMonth","chunkArray","jsxDEV","_jsxDEV","CalenderScliderByMonth","_s","isModalOpen","setIsModalOpen","selectedDay","setSelectedDay","textarea","setTextArea","currentDate","setCurrentDate","Date","eventData","setEventData","JSON","parse","localStorage","getItem","setItem","stringify","t","daysOfWeek","handleDayDoubleClick","day","closeModal","days","weeks","translatedMonthName","monthName","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","name","getFullYear","map","week","weekIndex","onDoubleClick","isOpen","onClose","_c","$RefreshReg$"],"sources":["/home/brilworks-26/Videos/backup/event-calender/event-calender/src/Pages/CalenderScliderByMonth.jsx"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import \"../App.css\";\n// import FontAwesome from \"react-fontawesome\";\n// import * as formik from \"formik\";\n// import { useTranslation } from \"react-i18next\";\n// import LanguageSwitcher from \"./LanguageSwitcher\";\n// import { DayCell } from \"../components/DayCell\";\n// import { DayHeader } from \"../components/DayHeader\";\n// import { EventModal } from \"../components/EventModal\";\n// import {\n//   getDaysInMonth,\n//   nextMonth,\n//   prevMonth,\n//   chunkArray,\n// } from \"../utils/dateFunctions\";\n// const { Formik } = formik;\n\n// const CalenderScliderByMonth = () => {\n//   const [isModalOpen, setIsModalOpen] = useState(false);\n//   const [selectedDay, setSelectedDay] = useState(null);\n//   const [textarea, setTextArea] = useState(\"\");\n//   const [currentDate, setCurrentDate] = useState(new Date());\n//   const [eventData, setEventData] = useState(\n//     JSON.parse(localStorage.getItem(\"eventData\")) || []\n//   );\n\n//   useEffect(() => {\n//     localStorage.setItem(\"eventData\", JSON.stringify(eventData));\n//   }, [eventData]);\n\n//   useEffect(() => {\n//     document.title = `${currentDate.toLocaleString(\"default\", {\n//       month: \"long\",\n//       year: \"numeric\",\n//     })}`;\n//   }, [currentDate]);\n\n//   const { t } = useTranslation();\n\n//   const daysOfWeek = [\n//     t(\"Sunday\"),\n//     t(\"Monday\"),\n//     t(\"Tuesday\"),\n//     t(\"Wednesday\"),\n//     t(\"Thursday\"),\n//     t(\"Friday\"),\n//     t(\"Saturday\"),\n//   ];\n//   const handletextareaChange = (e) => {\n//     setTextArea(e.target.value);\n//   };\n\n//   const handleDayDoubleClick = (day) => {\n//     setSelectedDay(day);\n//     setIsModalOpen(true);\n//   };\n\n//   const closeModal = () => {\n//     setIsModalOpen(false);\n//     setSelectedDay(null);\n//   };\n\n//   const days = Array.from(\n//     {\n//       length: getDaysInMonth(currentDate.getMonth(), currentDate.getFullYear()),\n//     },\n//     (_, i) => i + 1\n//   );\n\n//   const monthName = currentDate.toLocaleString(\"default\", { month: \"long\" });\n//   const translatedMonthName = t(`${monthName}`);\n\n//   const weeks = chunkArray(days, 7);\n//   return (\n//     <div>\n//       <LanguageSwitcher />\n//       <div className=\"buttons flex justify-around h-600 p-500 \">\n//         <button\n//           class=\"p-1\"\n//           onClick={() => prevMonth(currentDate, setCurrentDate)}\n//         >\n//           <FontAwesome name=\"chevron-left\" className=\"-ml-px\" />\n//         </button>\n//         <button\n//           class=\"p-1\"\n//           onClick={() => nextMonth(currentDate, setCurrentDate)}\n//         >\n//           <FontAwesome name=\"chevron-right\" className=\"-ml-px\" />\n//         </button>\n//       </div>\n//       <div class=\"container mx-auto mt-10\">\n//         <div class=\"\">\n//           <div class=\"header flex justify-between border-b p-2\">\n//             <span class=\"text-lg font-bold\">\n//               {\" \"}\n//               <span class=\"text-lg font-bold\">\n//                 {`${translatedMonthName} ${currentDate.getFullYear()}`}\n//               </span>\n//             </span>\n//             <div class=\"buttons\">\n//               <button class=\"p-1\">\n//                 <path\n//                   fill-rule=\"evenodd\"\n//                   d=\"M8 15A7 7 0 1 0 8 1a7 7 0 0 0 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z\"\n//                 />\n//                 <path\n//                   fill-rule=\"evenodd\"\n//                   d=\"M8.354 11.354a.5.5 0 0 0 0-.708L5.707 8l2.647-2.646a.5.5 0 1 0-.708-.708l-3 3a.5.5 0 0 0 0 .708l3 3a.5.5 0 0 0 .708 0z\"\n//                 />\n//                 <path\n//                   fill-rule=\"evenodd\"\n//                   d=\"M11.5 8a.5.5 0 0 0-.5-.5H6a.5.5 0 0 0 0 1h5a.5.5 0 0 0 .5-.5z\"\n//                 />\n//               </button>\n//               <button class=\"p-1\">\n//                 <path\n//                   fill-rule=\"evenodd\"\n//                   d=\"M8 15A7 7 0 1 0 8 1a7 7 0 0 0 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z\"\n//                 />\n//                 <path\n//                   fill-rule=\"evenodd\"\n//                   d=\"M7.646 11.354a.5.5 0 0 1 0-.708L10.293 8 7.646 5.354a.5.5 0 1 1 .708-.708l3 3a.5.5 0 0 1 0 .708l-3 3a.5.5 0 0 1-.708 0z\"\n//                 />\n//                 <path\n//                   fill-rule=\"evenodd\"\n//                   d=\"M4.5 8a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1H5a.5.5 0 0 1-.5-.5z\"\n//                 />\n//               </button>\n//             </div>\n//           </div>\n\n//           <table class=\"w-full\">\n//             <DayHeader daysOfWeek={daysOfWeek} />\n//             <tbody>\n//               {weeks.map((week, weekIndex) => (\n//                 <tr key={weekIndex} className=\"text-center h-20\">\n//                   {week.map((day) => (\n//                     <DayCell\n//                       key={day}\n//                       day={day}\n//                       currentDate={currentDate}\n//                       onDoubleClick={handleDayDoubleClick}\n//                       eventData={eventData}\n//                     />\n//                   ))}\n//                 </tr>\n//               ))}\n//             </tbody>\n//           </table>\n\n//           <EventModal\n//             isOpen={isModalOpen}\n//             onClose={closeModal}\n//             selectedDay={selectedDay}\n//             eventData={eventData}\n//             setEventData={setEventData}\n//             Formik={Formik}\n//             textarea={textarea}\n//             setTextArea={setTextArea}\n//             handletextareaChange={handletextareaChange}\n//             currentDate={currentDate}\n//           />\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default CalenderScliderByMonth;\nimport React, { useState, useEffect } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faChevronLeft, faChevronRight } from \"@fortawesome/free-solid-svg-icons\";\nimport { Formik } from \"formik\";\nimport { useTranslation } from \"react-i18next\";\nimport FontAwesome from \"react-fontawesome\";\nimport \"../App.css\";\nimport LanguageSwitcher from \"./LanguageSwitcher\";\nimport { DayCell } from \"../components/DayCell\";\nimport { DayHeader } from \"../components/DayHeader\";\nimport { EventModal } from \"../components/EventModal\";\nimport {\n  getDaysInMonth,\n  nextMonth,\n  prevMonth,\n  chunkArray,\n} from \"../utils/dateFunctions\";\n\nconst CalenderScliderByMonth = () => {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [selectedDay, setSelectedDay] = useState(null);\n  const [textarea, setTextArea] = useState(\"\");\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [eventData, setEventData] = useState(\n    JSON.parse(localStorage.getItem(\"eventData\")) || []\n  );\n\n  useEffect(() => {\n    localStorage.setItem(\"eventData\", JSON.stringify(eventData));\n  }, [eventData]);\n\n  const { t } = useTranslation();\n\n  const daysOfWeek = [\n    t(\"Sunday\"),\n    t(\"Monday\"),\n    t(\"Tuesday\"),\n    t(\"Wednesday\"),\n    t(\"Thursday\"),\n    t(\"Friday\"),\n    t(\"Saturday\"),\n  ];\n\n  const handleDayDoubleClick = (day) => {\n    setSelectedDay(day);\n    setIsModalOpen(true);\n  };\n\n  const closeModal = () => {\n    setIsModalOpen(false);\n    setSelectedDay(null);\n  };\n\n  const days = getDaysInMonth(currentDate);\n  const weeks = chunkArray(days, 7);\n  \n    const translatedMonthName = t(`${monthName}`);\n\n  // return (\n    // <div>\n    //   <LanguageSwitcher />\n    //   <div className=\"flex justify-between items-center py-5 px-10\">\n    //     <button onClick={() => prevMonth(currentDate, setCurrentDate)}>\n    //       <FontAwesomeIcon icon={faChevronLeft} />\n    //     </button>\n    //     <h1 className=\"text-xl font-bold\">\n    //       {`${currentDate.toLocaleString(\"default\", {\n    //         month: \"long\",\n    //       })} ${currentDate.getFullYear()}`}\n    //     </h1>\n    //     <button onClick={() => nextMonth(currentDate, setCurrentDate)}>\n    //       <FontAwesomeIcon icon={faChevronRight} />\n    //     </button>\n    //   </div>\n\n    //   < className=\"container mx-auto mt-10\">\n    //     <table className=\"w-full\">\n    //       <DayHeader daysOfWeek={daysOfWeek} />\n    //       <tbody>\n    //         {weeks.map((week, weekIndex) => (\n    //           <tr key={weekIndex} className=\"text-center h-20\">\n    //             {week.map((day) => (\n    //               <DayCell\n    //                 key={day}\n    //                 day={day}\n    //                 currentDate={currentDate}\n    //                 onDoubleClick={handleDayDoubleClick}\n    //                 eventData={eventData}\n    //               />\n    //             ))}\n    //           </tr>\n    //         ))}\n    //       </tbody>\n    //     </table>\n    return (\n      <div className=\"bg-gray-100 min-h-screen\">\n        <LanguageSwitcher />\n        <div className=\"flex justify-between items-center py-4 px-6 bg-white shadow-md\">\n          <button onClick={() => prevMonth(currentDate, setCurrentDate)} className=\"text-xl\">\n            <FontAwesome name=\"chevron-left\" />\n          </button>\n          <h1 className=\"text-2xl font-semibold\">{`${translatedMonthName} ${currentDate.getFullYear()}`}</h1>\n          <button onClick={() => nextMonth(currentDate, setCurrentDate)} className=\"text-xl\">\n            <FontAwesome name=\"chevron-right\" />\n          </button>\n        </div>\n        <div className=\"mt-10\">\n          <DayHeader daysOfWeek={daysOfWeek} />\n          <div className=\"bg-white shadow-md rounded-lg p-4\">\n            {weeks.map((week, weekIndex) => (\n              <div key={weekIndex} className=\"flex\">\n                {week.map((day) => (\n                  <DayCell\n                    key={day}\n                    day={day}\n                    currentDate={currentDate}\n                    onDoubleClick={handleDayDoubleClick}\n                    eventData={eventData}\n                  />\n                ))}\n              </div>\n            ))}\n          </div>\n        <EventModal\n          isOpen={isModalOpen}\n          onClose={closeModal}\n          selectedDay={selectedDay}\n          eventData={eventData}\n          setEventData={setEventData}\n          Formik={Formik}\n          textarea={textarea}\n          setTextArea={setTextArea}\n          currentDate={currentDate}\n        />\n      </div>\n    </div>\n    \n  );\n};\n\nexport default CalenderScliderByMonth;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,eAAe,QAAQ,gCAAgC;AAChE,SAASC,aAAa,EAAEC,cAAc,QAAQ,mCAAmC;AACjF,SAASC,MAAM,QAAQ,QAAQ;AAC/B,SAASC,cAAc,QAAQ,eAAe;AAC9C,OAAOC,WAAW,MAAM,mBAAmB;AAC3C,OAAO,YAAY;AACnB,OAAOC,gBAAgB,MAAM,oBAAoB;AACjD,SAASC,OAAO,QAAQ,uBAAuB;AAC/C,SAASC,SAAS,QAAQ,yBAAyB;AACnD,SAASC,UAAU,QAAQ,0BAA0B;AACrD,SACEC,cAAc,EACdC,SAAS,EACTC,SAAS,EACTC,UAAU,QACL,wBAAwB;AAAC,SAAA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}